var l=class{defaultRequestTimeout=1e3;#o="__WAITER_CONFIG_COMMON__";#t="[Waiter]";#r;constructor(t={}){let{namespace:r,outputPrefix:o,token:e}=t;this.#o=r||this.#o,this.#t=o||this.#t,this.#r=e,this.#i()||this.#e()}get config(){return window[this.#o]}createController(t,r,o){if(this.#r&&this.#r!==o)throw new Error(`${this.#t} Invalid authorization token for endpoint: "${t}".`);if(this.config.controllers.has(t))throw new Error(`${this.#t} Endpoint: "${t}", already exists.`);let e=async(n,s)=>{try{let i=await r(n);s(i)}catch(i){throw i}};this.config.controllers.set(t,e)}removeController(t,r){if(this.#r&&this.#r!==r)throw new Error(`${this.#t} Invalid authorization token for endpoint: "${t}".`);if(!this.config.controllers.has(t))throw new Error(`${this.#t} Endpoint: "${t}", not found.`);this.config.controllers.delete(t)}request(t,r,o){if(!this.config.controllers.has(t))throw new Error(`${this.#t} Endpoint: "${t}", not found.`);return new Promise((e,n)=>{let s=setTimeout(()=>n(new Error(`${this.#t} Request to endpoint: "${t}", timed out.`)),o?.timeout||this.defaultRequestTimeout),i=a=>(clearTimeout(s),e(a));try{this.config.controllers.get(t)?.(r,i)}catch(a){clearTimeout(s),n(a)}})}#e(){window[this.#o]={controllers:new Map}}#i(){return this.config!==void 0}};export{l as default};
//# sourceMappingURL=waiter.mjs.map
